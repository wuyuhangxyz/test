# 假如我们要在pygame中实现一个功能，按下a键就输出一句话

# 这种方法耦合性过强，不适合多人开发和后期优化
if event.key == pygame.K_a:
  print("按下了a")


# 这种方法是对上面代码的解耦，效果相同，但是把算法和pygame的模块分开来。
# 比如你写pygame的部分，你就只需要写好检测代码并封装成函数，其他就不用管了，而我写算法的部分，我就可以调用你写的pygame端的API，这样省时省力。
# 假如使用方法1，你就需要写好if的部分，把代码发给我，我再来写print的部分，太麻烦了。假如写一段代码的时间是1，那么总体需要的时间大约为3（发送代码需要时间）
# 而使用方法2，你写函数a，我写函数b，最后合起来，那么总体需要的时间大约为2。
# 而且，假如pygame端要更改效果，按照方法一，就需要重写代码，如果按照方案二，就只需要把负责pygame端的a函数进行更改，而负责后端算法的b函数可以保持不变。
# 这种解耦的方法借鉴自web服务器开发中的前后端分离，不仅节省时间和人力资源，还对后期优化有很大的作用。
# 你的代码我也看了，大多数是面向对象的开发，其实面向对象的开发本身就带有不同功能的模块间的解耦性质，但你没有充分利用这一点，我就想要优化这一点。
# 还有就是你的项目结构不太好，把所有的代码都放在main.py里面，同样还是一个问题，体积过大，不利于优化和协作，耦合性过强。
# 当然，考虑到xes社区的编辑器限制和生态环境，只能够这样，但是通过github发布的代码，就要改进项目结构了。
def a():
  if event.key == pygame.K_a:
    return True
  else:
    return False
def b(c):
  if c:
    print("按下了a")
b(a())
